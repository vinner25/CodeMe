package com.vinner.codeme.leetcode;

import com.vinner.codeme.ProblemStatement;

public class FactorialTrailingZeroes implements ProblemStatement {

    public int trailingZeroes(int n) {

        int count = 0;
        while(n >= 5 )
        {
            count = count+ (n/5);
            n = n/5;
        }
        return count;
    }

    @Override
    public String getDescription() {
        return "Given an integer n, return the number of trailing zeroes in n!.\n" +
                "\n" +
                "Note that n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1.\n" +
                "\n" +
                " \n" +
                "\n" +
                "Example 1:\n" +
                "\n" +
                "Input: n = 3\n" +
                "Output: 0\n" +
                "Explanation: 3! = 6, no trailing zero.\n" +
                "Example 2:\n" +
                "\n" +
                "Input: n = 5\n" +
                "Output: 1\n" +
                "Explanation: 5! = 120, one trailing zero.\n" +
                "Example 3:\n" +
                "\n" +
                "Input: n = 0\n" +
                "Output: 0\n" +
                " \n" +
                "\n" +
                "Constraints:\n" +
                "\n" +
                "0 <= n <= 104\n" +
                " \n" +
                "\n" +
                "Follow up: Could you write a solution that works in logarithmic time complexity?";
    }

    @Override
    public String getSolutionNotes() {
        return "Since the trailing Zeroes are only generated by 2 * 5 or any multiple of 5 . We simply need to calculate the number of " +
                "multiples of 5 in this problem";
    }

    @Override
    public String getTimeComplexity() {
        return "O(logN)";
    }

    @Override
    public String getSpaceComplexity() {
        return "O(1)";
    }
}
